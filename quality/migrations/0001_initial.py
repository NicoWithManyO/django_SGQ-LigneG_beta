# Generated by Django 5.2.4 on 2025-07-25 20:34

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalog', '0001_initial'),
        ('planification', '0001_initial'),
        ('production', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Controls',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(help_text='Clé de session pour lier au shift en cours', max_length=255, verbose_name='Clé de session')),
                ('micrometer_left_1', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Micronnaire Gauche #1')),
                ('micrometer_left_2', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Micronnaire Gauche #2')),
                ('micrometer_left_3', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Micronnaire Gauche #3')),
                ('micrometer_left_avg', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Micronnaire Gauche Moyenne')),
                ('micrometer_right_1', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Micronnaire Droite #1')),
                ('micrometer_right_2', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Micronnaire Droite #2')),
                ('micrometer_right_3', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Micronnaire Droite #3')),
                ('micrometer_right_avg', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Micronnaire Droite Moyenne')),
                ('dry_extract', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Extrait Sec (%)')),
                ('dry_extract_time', models.TimeField(blank=True, null=True, verbose_name='Heure Extrait Sec')),
                ('surface_mass_gg', models.DecimalField(blank=True, decimal_places=6, max_digits=12, null=True, verbose_name='Masse Surfacique GG (g/25cm²)')),
                ('surface_mass_gc', models.DecimalField(blank=True, decimal_places=6, max_digits=12, null=True, verbose_name='Masse Surfacique GC (g/25cm²)')),
                ('surface_mass_left_avg', models.DecimalField(blank=True, decimal_places=6, max_digits=12, null=True, verbose_name='Masse Surfacique Gauche Moyenne')),
                ('surface_mass_dc', models.DecimalField(blank=True, decimal_places=6, max_digits=12, null=True, verbose_name='Masse Surfacique DC (g/25cm²)')),
                ('surface_mass_dd', models.DecimalField(blank=True, decimal_places=6, max_digits=12, null=True, verbose_name='Masse Surfacique DD (g/25cm²)')),
                ('surface_mass_right_avg', models.DecimalField(blank=True, decimal_places=6, max_digits=12, null=True, verbose_name='Masse Surfacique Droite Moyenne')),
                ('loi_given', models.BooleanField(default=False, verbose_name='LOI donnée')),
                ('loi_time', models.TimeField(blank=True, null=True, verbose_name='Heure LOI')),
                ('is_valid', models.BooleanField(default=True, help_text='Indique si tous les contrôles sont dans les tolérances', verbose_name='Contrôles valides')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date/heure du contrôle')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planification.operator', verbose_name='Contrôlé par')),
                ('shift', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quality_controls', to='production.shift', verbose_name='Poste')),
            ],
            options={
                'verbose_name': 'Contrôle qualité',
                'verbose_name_plural': 'Contrôles qualité',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['shift', '-created_at'], name='quality_con_shift_i_463542_idx'), models.Index(fields=['session_key', '-created_at'], name='quality_con_session_20e907_idx'), models.Index(fields=['is_valid', '-created_at'], name='quality_con_is_vali_6b9c3d_idx')],
            },
        ),
        migrations.CreateModel(
            name='RollDefect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meter_position', models.PositiveIntegerField(help_text='Position du défaut en mètres depuis le début', verbose_name='Position (m)')),
                ('side_position', models.CharField(choices=[('GG', 'Gauche Gauche'), ('GC', 'Gauche Centre'), ('GD', 'Gauche Droite'), ('DG', 'Droite Gauche'), ('DC', 'Droite Centre'), ('DD', 'Droite Droite')], help_text='Position transversale du défaut sur la laize', max_length=10, verbose_name='Position transversale')),
                ('comment', models.TextField(blank=True, help_text='Détails supplémentaires sur le défaut', verbose_name='Commentaire')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('defect_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='occurrences', to='catalog.qualitydefecttype', verbose_name='Type de défaut')),
                ('roll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defects', to='production.roll', verbose_name='Rouleau')),
            ],
            options={
                'verbose_name': 'Défaut rouleau',
                'verbose_name_plural': 'Défauts rouleaux',
                'ordering': ['roll', 'meter_position'],
                'indexes': [models.Index(fields=['roll', 'meter_position'], name='quality_rol_roll_id_de2a00_idx'), models.Index(fields=['defect_type', '-created_at'], name='quality_rol_defect__18107f_idx')],
                'unique_together': {('roll', 'meter_position', 'side_position', 'defect_type')},
            },
        ),
        migrations.CreateModel(
            name='RollThickness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meter_position', models.PositiveIntegerField(help_text='Position de la mesure en mètres', verbose_name='Position (m)')),
                ('measurement_point', models.CharField(choices=[('GG', 'Gauche Gauche'), ('GC', 'Gauche Centre'), ('GD', 'Gauche Droite'), ('DG', 'Droite Gauche'), ('DC', 'Droite Centre'), ('DD', 'Droite Droite')], max_length=2, verbose_name='Point de mesure')),
                ('thickness_value', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Épaisseur (mm)')),
                ('is_catchup', models.BooleanField(default=False, help_text="Indique si c'est une mesure de rattrapage", verbose_name='Mesure de rattrapage')),
                ('is_within_tolerance', models.BooleanField(default=True, verbose_name='Dans les tolérances')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('roll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thickness_measurements', to='production.roll', verbose_name='Rouleau')),
            ],
            options={
                'verbose_name': "Mesure d'épaisseur",
                'verbose_name_plural': "Mesures d'épaisseur",
                'ordering': ['roll', 'meter_position', 'measurement_point'],
                'indexes': [models.Index(fields=['roll', 'meter_position'], name='quality_rol_roll_id_22ccf4_idx'), models.Index(fields=['roll', 'is_catchup'], name='quality_rol_roll_id_d75532_idx'), models.Index(fields=['is_within_tolerance', '-created_at'], name='quality_rol_is_with_6ef636_idx')],
            },
        ),
    ]
